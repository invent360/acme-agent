// Code generated by go-swagger; DO NOT EDIT.

package post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"github.com/acme-agent/api/crankshaft/client"
	"github.com/acme-agent/api/crankshaft/models"
	"time"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new post API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for post API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	Get(params *GetParams) (*GetOK, error)

	List(params *ListParams) (*ListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Get get API
*/
func (a *Client) Get(params *GetParams) (*GetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get",
		Method:             "GET",
		PathPattern:        "/posts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	//################ Submit Observation to Crankshaft Start########################
	if err != nil {
		observationEndpoint := models.APIObservationEndpoint{
			EndpointID: "c4492be4-7a53-4ed6-a1ba-6762884e794f",
			InConnections:  2,
			OutConnections: 4,
			LocalResets:    5,
			RemoteResets:   3,
		}
		observation :=  models.APIObservation{
			Start:     time.Now(),
			End:       time.Now(),
			Endpoints: [] models.APIObservationEndpoint{observationEndpoint},
		}
		client.PostObservation(&observation)
	}
	//################ Submit Observation to Crankshaft End########################
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  List list API
*/
func (a *Client) List(params *ListParams) (*ListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListParams()
	}

	fmt.Println("#################### Calling Crankshaft v1 ############")
	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "List",
		Method:             "GET",
		PathPattern:        "/posts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	//################ Submit Observation to Crankshaft Start########################
	if err == nil {
		observationEndpoint := models.APIObservationEndpoint{
			EndpointID: "c4492be4-7a53-4ed6-a1ba-6762884e794f",
			InConnections:  2,
			OutConnections: 4,
			LocalResets:    5,
			RemoteResets:   3,
		}
		observation :=  models.APIObservation{
			Start:     time.Now(),
			End:       time.Now(),
			Endpoints: [] models.APIObservationEndpoint{observationEndpoint},
		}
		client.PostObservation(&observation)
	}
	//################ Submit Observation to Crankshaft End########################
	success, ok := result.(*ListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
